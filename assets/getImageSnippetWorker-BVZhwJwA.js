(function(){"use strict";self.onmessage=function(l){const{blob:c,annotation:g}=l.data;u(c,g).then(r=>{self.postMessage({snippet:r}),self.close()}).catch(r=>self.postMessage({error:r.message}))};function u(l,c,g=800,r=800){return new Promise((w,d)=>{const{bounds:s}=c.target.selector.geometry,e=s.maxX-s.minX,t=s.maxY-s.minY;createImageBitmap(l).then(a=>{const n=new OffscreenCanvas(e,t),i=n.getContext("2d");if(!i){d(new Error("Failed to get canvas context"));return}i.drawImage(a,s.minX,s.minY,e,t,0,0,e,t),a.close();const o=Math.min(g/e,r/t,1);if(o<1){console.debug(`Resizing image from ${e}x${t} to ${e*o}x${t*o}`);const m=new OffscreenCanvas(e*o,t*o),f=m.getContext("2d");if(!f){d(new Error("Failed to get resized canvas context"));return}return f.drawImage(n,0,0,e,t,0,0,e*o,t*o),m.convertToBlob({type:"image/jpeg",quality:.9})}else return n.convertToBlob({type:"image/jpeg",quality:.9})}).then(a=>{const n=new FileReader;n.onload=()=>{const i=new Uint8Array(n.result);w({annotation:c,height:t,width:e,data:i}),n.onload=null},n.readAsArrayBuffer(a)}).catch(a=>d(a))})}})();
